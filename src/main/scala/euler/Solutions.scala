package euler

object Solutions {

  /**
   * If we list all the natural numbers below 10 that are multiples of 3 or 5,
   * we get 3, 5, 6 and 9. The sum of these multiples is 23.
   *
   * Find the sum of all the multiples of 3 or 5 below 1000.
   */
  def multiplesOfThreeAndFive(n: Int): Int = {
    (1 to n - 1).filter(n => n % 3 == 0 || n % 5 == 0).sum
  }

  /**
   * Each new term in the Fibonacci sequence is generated by adding the previous
   * two terms. By starting with 1 and 2, the first 10 terms will be:
   *
   *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   *
   * By considering the terms in the Fibonacci sequence whose values do not
   * exceed four million, find the sum of the even-valued terms.
   */
  def evenFibonacciNumbers(n: Int): Int = {
    import euler.util.Fibonacci._
    import euler.util.oddeven.even

    val FOUR_MILLION = 4000000

    fibonacci.takeWhile(_ < FOUR_MILLION).filter(even(_)).sum
  }

  /**
   * The prime factors of 13195 are 5, 7, 13 and 29.
   *
   * What is the largest prime factor of the number 600851475143 ?
   */
  def largestPrimeFactor(n: Long): Option[Long] = {
    import euler.util.Primes

    val factors = Primes.primeFactors(n)

    if (factors.isEmpty) None
    else Some(factors.reduceLeft((x, y) => if (x > y) x else y))
  }
}
